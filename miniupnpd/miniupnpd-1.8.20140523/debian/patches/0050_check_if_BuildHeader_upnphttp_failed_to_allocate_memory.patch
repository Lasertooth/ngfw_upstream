Description: miniupnpd: check if BuildHeader_upnphttp() failed to allocate memory
Author: Thomas Bernard <miniupnp@free.fr>
Origin: upstream, https://github.com/miniupnp/miniupnp/commit/ec94c5663fe80dd6ceea895c73e2be66b1ef6bf4.patch
Date: Tue, 9 Dec 2014 11:04:15 +0100
Bug-Debian: https://bugs.debian.org/772644
Last-Update: 2014-12-09

diff --git a/upnphttp.c b/upnphttp.c
index 499879f..f23832a 100644
--- a/upnphttp.c
+++ b/upnphttp.c
@@ -986,7 +986,7 @@ static const char httpresphead[] =
 /* with response code and response message
  * also allocate enough memory */
 
-void
+int
 BuildHeader_upnphttp(struct upnphttp * h, int respcode,
                      const char * respmsg,
                      int bodylen)
@@ -1000,7 +1000,7 @@ BuildHeader_upnphttp(struct upnphttp * h, int respcode,
 		h->res_buf = (char *)malloc(templen);
 		if(!h->res_buf) {
 			syslog(LOG_ERR, "malloc error in BuildHeader_upnphttp()");
-			return;
+			return -1;
 		}
 		h->res_buf_alloclen = templen;
 	}
@@ -1079,8 +1079,10 @@ BuildHeader_upnphttp(struct upnphttp * h, int respcode,
 		else
 		{
 			syslog(LOG_ERR, "realloc error in BuildHeader_upnphttp()");
+			return -1;
 		}
 	}
+	return 0;
 }
 
 void
@@ -1088,8 +1090,8 @@ BuildResp2_upnphttp(struct upnphttp * h, int respcode,
                     const char * respmsg,
                     const char * body, int bodylen)
 {
-	BuildHeader_upnphttp(h, respcode, respmsg, bodylen);
-	if(body)
+	int r = BuildHeader_upnphttp(h, respcode, respmsg, bodylen);
+	if(body && (r >= 0))
 		memcpy(h->res_buf + h->res_buflen, body, bodylen);
 	h->res_buflen += bodylen;
 }
diff --git a/upnphttp.h b/upnphttp.h
index 4bd7f9b..70fef8f 100644
--- a/upnphttp.h
+++ b/upnphttp.h
@@ -136,8 +136,9 @@ Process_upnphttp(struct upnphttp *);
 
 /* BuildHeader_upnphttp()
  * build the header for the HTTP Response
- * also allocate the buffer for body data */
-void
+ * also allocate the buffer for body data
+ * return -1 on error */
+int
 BuildHeader_upnphttp(struct upnphttp * h, int respcode,
                      const char * respmsg,
                      int bodylen);
diff --git a/upnpsoap.c b/upnpsoap.c
index efd0658..e8db166 100644
--- a/upnpsoap.c
+++ b/upnpsoap.c
@@ -45,17 +45,21 @@ BuildSendAndCloseSoapResp(struct upnphttp * h,
 		"</s:Body>"
 		"</s:Envelope>\r\n";
 
-	BuildHeader_upnphttp(h, 200, "OK",  sizeof(beforebody) - 1
-		+ sizeof(afterbody) - 1 + bodylen );
+	int r = BuildHeader_upnphttp(h, 200, "OK",  sizeof(beforebody) - 1
+	                             + sizeof(afterbody) - 1 + bodylen );
 
-	memcpy(h->res_buf + h->res_buflen, beforebody, sizeof(beforebody) - 1);
-	h->res_buflen += sizeof(beforebody) - 1;
+	if(r >= 0) {
+		memcpy(h->res_buf + h->res_buflen, beforebody, sizeof(beforebody) - 1);
+		h->res_buflen += sizeof(beforebody) - 1;
 
-	memcpy(h->res_buf + h->res_buflen, body, bodylen);
-	h->res_buflen += bodylen;
+		memcpy(h->res_buf + h->res_buflen, body, bodylen);
+		h->res_buflen += bodylen;
 
-	memcpy(h->res_buf + h->res_buflen, afterbody, sizeof(afterbody) - 1);
-	h->res_buflen += sizeof(afterbody) - 1;
+		memcpy(h->res_buf + h->res_buflen, afterbody, sizeof(afterbody) - 1);
+		h->res_buflen += sizeof(afterbody) - 1;
+	} else {
+		BuildResp2_upnphttp(h, 500, "Internal Server Error", NULL, 0);
+	}
 
 	SendRespAndClose_upnphttp(h);
 }
